import os
import logging
from flask import Flask, request, send_from_directory
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)

TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is not set")

DOMAIN = os.environ.get('REPLIT_DEV_DOMAIN', 'localhost:5000')
WEBAPP_URL = f"https://{DOMAIN}"

app = Flask(__name__, static_folder='static', static_url_path='')

@app.route('/')
def index():
    return send_from_directory('static', 'index.html')

@app.route('/<path:path>')
def serve_file(path):
    return send_from_directory('static', path)

@app.route('/webhook', methods=['POST'])
async def webhook():
    try:
        update = Update.de_json(request.get_json(), telegram_app.bot)
        await telegram_app.process_update(update)
        return 'ok'
    except Exception as e:
        logger.error(f"Error processing update: {e}")
        return 'error', 500

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    
    keyboard = [[KeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ City Survival", web_app=WebAppInfo(url=WEBAPP_URL))]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ City Survival!\n\n"
        "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –≤ –º–∏—Ä–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∂–∏—Ç—å –≤ –Ω–µ–º.\n"
        "üõ°Ô∏è –°—Ç—Ä–æ–π—Ç–µ –±–∞—Ä—Ä–∏–∫–∞–¥—ã, —Å–æ–±–∏—Ä–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∑–∞—â–∏—â–∞–π—Ç–µ—Å—å!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    
    await update.message.reply_text(
        "üéÆ City Survival - –∏–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–≥—Ä–∞—Ç—å'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ –º–∏—Ä–∞\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º –¥–ª—è —É–∫—Ä—ã—Ç–∏—è\n"
        "4. –°—Ç—Ä–æ–π—Ç–µ –±–∞—Ä—Ä–∏–∫–∞–¥—ã –∏ –≤—ã–∂–∏–≤–∞–π—Ç–µ!"
    )

telegram_app = Application.builder().token(TOKEN).build()

telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("help", help_command))

async def setup_webhook():
    webhook_url = f"https://{DOMAIN}/webhook"
    await telegram_app.bot.set_webhook(webhook_url)
    logger.info(f"Webhook set to: {webhook_url}")

if __name__ == '__main__':
    import asyncio
    
    async def init():
        await telegram_app.initialize()
        await setup_webhook()
    
    asyncio.run(init())
    
    logger.info(f"Starting server on port 5000...")
    logger.info(f"Web App URL: {WEBAPP_URL}")
    app.run(host='0.0.0.0', port=5000, debug=False)
